{"version":3,"sources":["Components/ShuffleCard/index.js","App.js","serviceWorker.js","index.js"],"names":["ShuffleCard","props","react_default","a","createElement","className","data-clicked","clicked","id","alt","name","src","image","onClick","handleClick","App","state","cards","shuffle","i","length","j","Math","floor","random","_ref","event","target","attributes","getNamedItem","value","newState","Object","objectSpread","_this","results","console","log","setState","_this2","this","map","card","Components_ShuffleCard","shuffleCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"imEAceA,MAXf,SAAqBC,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAETH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,eAAcL,EAAMM,SACjDL,EAAAC,EAAAC,cAAA,OAAKI,GAAIP,EAAMO,GAAIC,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,MAAOC,QAASZ,EAAMa,gCCqFlEC,6MA3EbC,MAAQ,CACNC,WAGDC,QAAU,SAACf,GACV,IAAK,IAAIgB,EAAIhB,EAAEiB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADPM,EAEpB,CAACtB,EAAEkB,GAAIlB,EAAEgB,IAAvBhB,EAAEgB,GAFgCM,EAAA,GAE5BtB,EAAEkB,GAF0BI,EAAA,GAIvC,OAAOtB,KAWTW,YAAc,SAACY,GACb,IAAMlB,EAAKkB,EAAMC,OAAOC,WAAWC,aAAa,MAAMC,MAChDC,EAAQC,OAAAC,EAAA,EAAAD,CAAA,GAAOE,EAAKlB,OACpBmB,EAAUJ,EAASd,MAAMT,GAAIE,KACjC0B,QAAQC,IAAIF,GAEd,IAAMlB,EAAQiB,EAAKhB,QAAQa,EAASd,OACpCiB,EAAKI,SAAS,CAAErB,mFAwBT,IAAAsB,EAAAC,KACP,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,2BAEDmC,KAAKxB,MAAMC,MAAMwB,IAAI,SAAAC,GAAI,OAC1BxC,EAAAC,EAAAC,cAACuC,EAAD,CACEC,YAAaL,EAAKK,YAClBpC,GAAIkC,EAAKlC,GACTqC,IAAKH,EAAKlC,GACVE,KAAMgC,EAAKhC,KACXE,MAAO8B,EAAK9B,MACZN,eAAcoC,EAAKnC,QACnBO,YAAayB,EAAKzB,wBAlEVgC,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a9ac0ced.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ShuffleCard(props) {\r\n  return (\r\n    <div className=\"image\">\r\n      \r\n          <div className=\"img-container\" data-clicked={props.clicked}>\r\n            <img id={props.id} alt={props.name} src={props.image} onClick={props.handleClick} />\r\n          </div> \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShuffleCard;\r\n\r\n\r\n","import React, { Component } from 'react';\nimport ShuffleCard from \"../src/Components/ShuffleCard\";\nimport './App.css';\nimport cards from \"./cards.json\";\n\n\n// Array.prototype.shuffle = function () {\n//   let i = this.length, j, temp;\n//   while (--i > 0) {\n//     j = Math.floor(Math.random() * (i + 1));\n//     temp = this[j];\n//     this[j] = this[i];\n//     this[i] = temp;\n//   }\n//   return this;\n// }\n\nclass App extends Component {\n  state = {\n    cards\n  };\n\n   shuffle = (a) => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n};\n\n  // ShuffleCard(array) {\n  //     for (let i = array.length - 1; i > 0; i--) {\n  //       let j = Math.floor(Math.random() * (i + 1));\n  //       [array[i], array[j]] = [array[j], array[i]];\n  //     }\n  //     return array;\n  //   };\n\n  handleClick = (event) => {\n    const id = event.target.attributes.getNamedItem(\"id\").value;\n    const newState = {...this.state};\n    const results = newState.cards[id].name;\n      console.log(results);\n      // console.log(cards.clicked);\n    const cards = this.shuffle(newState.cards);\n    this.setState({ cards });\n  };\n    // newState.cards.map(item => {\n    // if(id === id) {\n    //   console.log(item.clicked);\n    // }\n    // // };\n    // return console.log(\"\");\n    // })};\n\n// if (btnType ==='pick') {\n//   newState.match = 1 === Math.floor(Math.random() *5) + 1;\n//   newState.matchCount = newState.match\n//   ? newState.matchCount +1\n//   : newState.matchCount;\n// }\n\n// else {\n//   newState.match = false;\n// }\n\n// this.setState(newState);\n// this.loadNextDog();\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <header className=\"App-header\">\n          <h1 className=\"title\">80s Cartoon Click Game</h1>\n        </header>\n        {this.state.cards.map(card => (\n        <ShuffleCard\n          shuffleCard={this.shuffleCard}\n          id={card.id}\n          key={card.id}\n          name={card.name}\n          image={card.image}\n          data-clicked={card.clicked}\n          handleClick={this.handleClick}\n        />\n      ))}\n      </div>\n    );\n  };\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}